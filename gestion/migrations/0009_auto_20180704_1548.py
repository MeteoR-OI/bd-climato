# Generated by Django 2.0.6 on 2018-07-04 11:48

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('gestion', '0008_ins'),
    ]

    operations = [
        migrations.CreateModel(
            name='DECADQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DATJ', models.DateField(default=django.utils.timezone.now)),
                ('DATRECU', models.DateTimeField(default=django.utils.timezone.now)),
                ('NUM_DECADE', models.IntegerField(null=True, verbose_name='Numero de la decade')),
                ('RR', models.FloatField(null=True)),
                ('STATUS_DRR', models.IntegerField(null=True, verbose_name='1 - Relevé manuel, 2 - Relevé automatique')),
                ('RRAB', models.FloatField(null=True, verbose_name='Precipitation maxi en 24h')),
                ('STATUS_RRAB', models.IntegerField(null=True, verbose_name='1 - Relevé manuel, 2 - Relevé automatique')),
                ('RRABDAT', models.DateTimeField(null=True)),
                ('NBJRR1', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 1mm')),
                ('NBJRR5', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 5mm')),
                ('NBJRR10', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 10mm')),
                ('NBJRR30', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 30mm')),
                ('NBJRR50', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 50mm')),
                ('NBJRR100', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 100mm')),
                ('PMERM', models.FloatField(null=True)),
                ('PMERMINAB', models.FloatField(null=True)),
                ('PMERMINABDAT', models.DateTimeField(null=True)),
                ('TX', models.FloatField(null=True, verbose_name='Moyenne des TX de la decade')),
                ('TXAB', models.FloatField(null=True, verbose_name='TX max de la decade')),
                ('TXABDAT', models.DateTimeField(null=True, verbose_name='Date de la TX de la decade')),
                ('TXMIN', models.FloatField(null=True, verbose_name='TX min de la decade')),
                ('TXMINDAT', models.DateTimeField(null=True, verbose_name='Date de la TX min de la decade')),
                ('NBJTX0', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est inf à 0')),
                ('NBJTX25', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 25')),
                ('NBJTX30', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 30')),
                ('NBJTX35', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 35')),
                ('NBJTXI20', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est inf à 20')),
                ('NBJTXI27', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est inf à 27')),
                ('NBJTX32', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 32')),
                ('TN', models.FloatField(null=True, verbose_name='Moyenne des TN de la decade')),
                ('TNAB', models.FloatField(null=True, verbose_name='TN min de la decade')),
                ('TNDAT', models.DateTimeField(null=True, verbose_name='Date de la TN min de la decade')),
                ('TXMAX', models.FloatField(null=True, verbose_name='TN max de la decade')),
                ('TNMAXDAT', models.DateTimeField(null=True, verbose_name='Date de la TN max de la decade')),
                ('NBJTN5', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à -5')),
                ('NBJTNI10', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 10')),
                ('NBJTNI15', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 15')),
                ('NBJTNI20', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 20')),
                ('NBJTNS20', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est sup à 20')),
                ('NBJTNS25', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est sup à 25')),
                ('NBJGELEE', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 0')),
                ('UNAB', models.FloatField(null=True, verbose_name='Humidite relative minimale de la decade')),
                ('UNABDAT', models.DateTimeField(null=True, verbose_name="Date de l'Humidite relative minimale de la decade")),
                ('UXAB', models.FloatField(null=True, verbose_name='Humidite relative maximale de la decade')),
                ('UXABDAT', models.DateTimeField(null=True, verbose_name="Date de l'humidite relative maximale de la decade")),
                ('UMM', models.FloatField(null=True, verbose_name='Moyenne des humidites relatives de la decade')),
                ('FXIAB', models.FloatField(null=True, verbose_name='Rafale maxi de la décade')),
                ('DXIAB', models.FloatField(null=True, verbose_name='Direction de la rafale maxi de la décade')),
                ('FXIDAT', models.DateTimeField(null=True, verbose_name='Date la rafale maxi de la decade')),
                ('NBJFF10', models.IntegerField(null=True, verbose_name='Nombre de jours ou FF est sup à 10m/s')),
                ('NBJFF16', models.IntegerField(null=True, verbose_name='Nombre de jours ou FF est sup à 16m/s')),
                ('NBJFF28', models.IntegerField(null=True, verbose_name='Nombre de jours ou FF est sup à 28m/s')),
                ('FXYAB', models.FloatField(null=True, verbose_name='FXY max de la decade')),
                ('DXYAB', models.FloatField(null=True, verbose_name='Direction du FXYAB de la decade')),
                ('FXYABDAT', models.DateTimeField(null=True, verbose_name='Date du FXYAB de la decade')),
                ('NBJFXY8', models.IntegerField(null=True, verbose_name='Nombre de jours ou FXY est sup à 8m/s')),
                ('NBJFXY10', models.IntegerField(null=True, verbose_name='Nombre de jours ou FXY est sup à 10m/s')),
                ('NBJFXY15', models.IntegerField(null=True, verbose_name='Nombre de jours ou FXY est sup à 15m/s')),
                ('INST', models.IntegerField(null=True, verbose_name="Duree d'insolation quotidienne moyenne (min)")),
                ('HFM', models.FloatField(null=True)),
                ('HFX', models.FloatField(null=True)),
                ('HFN', models.FloatField(null=True)),
                ('HSM', models.FloatField(null=True)),
                ('HSX', models.FloatField(null=True)),
                ('HSN', models.FloatField(null=True)),
                ('TSM', models.FloatField(null=True)),
                ('TSX', models.FloatField(null=True)),
                ('TSN', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='H',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DATJ', models.DateTimeField(default=django.utils.timezone.now, verbose_name='AAAA-MM-JJ HH-MM de la mesure')),
                ('DATRECU', models.DateTimeField(default=django.utils.timezone.now, verbose_name='AAAA-MM-JJ HH-MM de la derniere modification')),
                ('RR1', models.FloatField(null=True)),
                ('DRR1', models.IntegerField(null=True, verbose_name='Durée de la précipitation en min')),
                ('STATUS_DRR1', models.IntegerField(null=True, verbose_name='1 - Relevé manuel, 2 - Relevé automatique')),
                ('RRI', models.FloatField(null=True)),
                ('HRRI', models.DateTimeField(null=True)),
                ('FF', models.FloatField(null=True, verbose_name='Force du vent moyenné sur 10min')),
                ('DD', models.FloatField(null=True)),
                ('FXY', models.FloatField(null=True, verbose_name="Valeur max de FF dans l'heure")),
                ('DXY', models.FloatField(null=True, verbose_name='Direction de FXY')),
                ('HXY', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de FXY')),
                ('FXI', models.FloatField(null=True, verbose_name="Rafales max de FF dans l'heure")),
                ('DXI', models.FloatField(null=True, verbose_name='Direction de FXI')),
                ('HXI', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de FXI')),
                ('T', models.FloatField(null=True)),
                ('TD', models.FloatField(null=True)),
                ('TN', models.FloatField(null=True)),
                ('HTN', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de TN')),
                ('TX', models.FloatField(null=True)),
                ('HTX', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de TX')),
                ('U', models.FloatField(null=True)),
                ('UN', models.FloatField(null=True, verbose_name="Humidite minimale dans l'heure")),
                ('HUN', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de UN')),
                ('UX', models.FloatField(null=True, verbose_name="Humidite maximale dans l'heure")),
                ('HUX', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de UX')),
                ('PMER', models.FloatField(null=True)),
                ('PMERMIN', models.FloatField(null=True)),
                ('HPERMIN', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de PMERMIN')),
                ('UV', models.IntegerField(null=True)),
                ('RAD', models.FloatField(null=True)),
                ('IC', models.FloatField(null=True)),
                ('WINDCHILL', models.FloatField(null=True)),
                ('ETP', models.FloatField(null=True)),
                ('ETPX', models.FloatField(null=True)),
                ('ETPN', models.FloatField(null=True)),
                ('HF', models.FloatField(null=True)),
                ('HFX', models.FloatField(null=True)),
                ('HFN', models.FloatField(null=True)),
                ('HS', models.FloatField(null=True)),
                ('HSX', models.FloatField(null=True)),
                ('HSN', models.FloatField(null=True)),
                ('TS', models.FloatField(null=True)),
                ('TSX', models.FloatField(null=True)),
                ('TSN', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HISTMAINT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DATMAINT', models.DateTimeField(null=True)),
                ('TYPE', models.CharField(max_length=100, null=True)),
                ('CAPT', models.CharField(max_length=25, null=True)),
                ('ACTEUR', models.CharField(max_length=25, null=True)),
                ('COMM', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HISTPOST',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LIEU_DIT', models.CharField(max_length=30, null=True)),
                ('DATDEB', models.DateTimeField(null=True)),
                ('DATFIN', models.DateTimeField(null=True)),
                ('LAT', models.FloatField()),
                ('LON', models.FloatField()),
                ('ALT', models.FloatField(verbose_name='Altitude du poste en m')),
                ('DATRECU', models.DateTimeField(default=django.utils.timezone.now)),
                ('PROP', models.CharField(max_length=20, verbose_name='Nom du propriétaire/entreprise')),
                ('ADRESSE', models.CharField(max_length=100)),
                ('MEL', models.CharField(max_length=40, null=True)),
                ('TEL', models.CharField(max_length=10, null=True)),
                ('COMM', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='INSTRUMENT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CAPTEUR', models.CharField(max_length=25)),
                ('DATDEB', models.DateTimeField()),
                ('DATFIN', models.DateTimeField(null=True)),
                ('MODELE', models.CharField(max_length=25, verbose_name='Version et modele du capteur')),
                ('HAUTEUR', models.FloatField()),
                ('VENTILATION', models.IntegerField(null=True, verbose_name='1 si capteur ventile, 0 sinon')),
                ('SEUILMIN', models.FloatField(null=True)),
                ('SEUILMAX', models.FloatField(null=True)),
                ('PRECISION', models.FloatField(null=True)),
                ('QUALITE', models.CharField(max_length=2, null=True, verbose_name="Qualite du site d'installation (voir classification)")),
                ('PASDETEMPS', models.FloatField(verbose_name='Intervalle de mesure en s')),
                ('TYPE_TERRAIN', models.CharField(max_length=15, null=True, verbose_name="Type de terrain sur l'implantation du capteur")),
                ('UNITE', models.CharField(max_length=10, verbose_name='Unite de mesure')),
                ('COMM', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MAINTENANCE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CAPTEUR', models.CharField(max_length=25)),
                ('DATMAINT', models.DateTimeField(null=True, verbose_name='Date de la derniere maintenance')),
                ('DATPMAINT', models.DateTimeField(null=True, verbose_name='Date de la prochaine maintenance')),
                ('TYPE', models.CharField(max_length=100, null=True, verbose_name='Type de maintenance')),
                ('IMPORTANCE', models.IntegerField(null=True, verbose_name='1 si alteration de la mesure - 2 aucune alteration')),
                ('ACTEUR', models.CharField(max_length=15, null=True, verbose_name="Personne s'occupant de la maintenance")),
                ('TELACTEUR', models.IntegerField(null=True)),
                ('COMM', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MENSQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DATJ', models.DateField(default=django.utils.timezone.now)),
                ('DATRECU', models.DateTimeField(default=django.utils.timezone.now)),
                ('RR', models.FloatField(null=True)),
                ('STATUS_DRR', models.IntegerField(null=True, verbose_name='1 - Relevé manuel, 2 - Relevé automatique')),
                ('RRAB', models.FloatField(null=True, verbose_name='Precipitation maxi en 24h')),
                ('STATUS_RRAB', models.IntegerField(null=True, verbose_name='1 - Relevé manuel, 2 - Relevé automatique')),
                ('RRABDAT', models.DateTimeField(null=True)),
                ('NBJRR1', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 1mm')),
                ('NBJRR5', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 5mm')),
                ('NBJRR10', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 10mm')),
                ('NBJRR30', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 30mm')),
                ('NBJRR50', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 50mm')),
                ('NBJRR100', models.IntegerField(null=True, verbose_name='Nb de jours RR sup à 100mm')),
                ('PMERM', models.FloatField(null=True)),
                ('PMERMINAB', models.FloatField(null=True)),
                ('PMERMINABDAT', models.DateTimeField(null=True)),
                ('TX', models.FloatField(null=True, verbose_name='Moyenne des TX du mois')),
                ('TXAB', models.FloatField(null=True, verbose_name='TX max du mois')),
                ('TXABDAT', models.DateTimeField(null=True, verbose_name='Date de la TX max du mois')),
                ('TXMIN', models.FloatField(null=True, verbose_name='TX min du mois')),
                ('TXMINDAT', models.DateTimeField(null=True, verbose_name='Date de la TX min du mois')),
                ('NBJTX0', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est inf à 0')),
                ('NBJTX25', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 25')),
                ('NBJTX30', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 30')),
                ('NBJTX35', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 35')),
                ('NBJTXI20', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est inf à 20')),
                ('NBJTXI27', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est inf à 27')),
                ('NBJTX32', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TX est sup à 32')),
                ('TN', models.FloatField(null=True, verbose_name='Moyenne des TN du mois')),
                ('TNAB', models.FloatField(null=True, verbose_name='TN min du mois')),
                ('TNDAT', models.DateTimeField(null=True, verbose_name='Date de la TN min du mois')),
                ('TXMAX', models.FloatField(null=True, verbose_name='TN max du mois')),
                ('TNMAXDAT', models.DateTimeField(null=True, verbose_name='Date de la TN max du mois')),
                ('NBJTN5', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à -5')),
                ('NBJTNI10', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 10')),
                ('NBJTNI15', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 15')),
                ('NBJTNI20', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 20')),
                ('NBJTNS20', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est sup à 20')),
                ('NBJTNS25', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est sup à 25')),
                ('NBJGELEE', models.IntegerField(null=True, verbose_name='Nombre de jours ou la TN est inf à 0')),
                ('UNAB', models.FloatField(null=True, verbose_name='Humidite relative minimale du mois')),
                ('UNABDAT', models.DateTimeField(null=True, verbose_name="Date de l'Humidite relative minimale du mois")),
                ('UXAB', models.FloatField(null=True, verbose_name='Humidite relative maximale du mois')),
                ('UXABDAT', models.DateTimeField(null=True, verbose_name="Date de l'humidite relative maximale du mois")),
                ('UMM', models.FloatField(null=True, verbose_name='Moyenne des humidites relatives du mois')),
                ('FXIAB', models.FloatField(null=True, verbose_name='Rafale maxi du mois')),
                ('DXIAB', models.FloatField(null=True, verbose_name='Direction de la rafale maxi du mois')),
                ('FXIDAT', models.DateTimeField(null=True, verbose_name='Date la rafale maxi du mois')),
                ('NBJFF10', models.IntegerField(null=True, verbose_name='Nombre de jours ou FF est sup à 10m/s')),
                ('NBJFF16', models.IntegerField(null=True, verbose_name='Nombre de jours ou FF est sup à 16m/s')),
                ('NBJFF28', models.IntegerField(null=True, verbose_name='Nombre de jours ou FF est sup à 28m/s')),
                ('FXYAB', models.FloatField(null=True, verbose_name='FXY max du mois')),
                ('DXYAB', models.FloatField(null=True, verbose_name='Direction du FXYAB du mois')),
                ('FXYABDAT', models.DateTimeField(null=True, verbose_name='Date du FXYAB du moise')),
                ('NBJFXY8', models.IntegerField(null=True, verbose_name='Nombre de jours ou FXY est sup à 8m/s')),
                ('NBJFXY10', models.IntegerField(null=True, verbose_name='Nombre de jours ou FXY est sup à 10m/s')),
                ('NBJFXY15', models.IntegerField(null=True, verbose_name='Nombre de jours ou FXY est sup à 15m/s')),
                ('INST', models.IntegerField(null=True, verbose_name="Duree d'insolation quotidienne moyenne (min)")),
                ('HFM', models.FloatField(null=True)),
                ('HFX', models.FloatField(null=True)),
                ('HFN', models.FloatField(null=True)),
                ('HSM', models.FloatField(null=True)),
                ('HSX', models.FloatField(null=True)),
                ('HSN', models.FloatField(null=True)),
                ('TSM', models.FloatField(null=True)),
                ('TSX', models.FloatField(null=True)),
                ('TSN', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PANNE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DEBUT', models.DateTimeField(null=True)),
                ('FIN', models.DateTimeField(null=True)),
                ('CAPTEUR', models.CharField(max_length=25, null=True)),
                ('COMM', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='POSTE',
            fields=[
                ('NUM_POSTE', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID Numero de poste')),
                ('CP', models.IntegerField(verbose_name='Code postal')),
                ('CODE_POSTE', models.CharField(max_length=10)),
                ('REF_MF', models.CharField(max_length=10, null=True)),
                ('NOM', models.CharField(max_length=10, verbose_name='Nom du poste (ex : NDLP)')),
                ('VILLE', models.CharField(max_length=25)),
                ('LAT', models.FloatField()),
                ('LON', models.FloatField()),
                ('ALT', models.FloatField(verbose_name='Altitude du poste en m')),
                ('POS', models.IntegerField(verbose_name='Personne physique(1) - Morale (2)')),
                ('AUT', models.IntegerField(verbose_name='Autorisation de stockage/diffusion')),
                ('PROP', models.CharField(max_length=20, verbose_name='Nom du propriétaire/entreprise')),
                ('DATEOUV', models.DateTimeField()),
                ('DATEFERM', models.DateTimeField(null=True)),
                ('MAINT', models.IntegerField(verbose_name='Code maintenance (tableau)')),
                ('TYPE', models.CharField(max_length=20, verbose_name='Modèle de station')),
                ('TYPINFO', models.CharField(max_length=20, verbose_name='Type de donnees (route,agricole,pédagogique,..)')),
                ('ADRESSE', models.CharField(max_length=100)),
                ('LIEU_DIT', models.CharField(max_length=30, null=True)),
                ('MEL', models.CharField(max_length=40, null=True)),
                ('TEL', models.CharField(max_length=10, null=True)),
                ('COMM', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Q',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DATJ', models.DateField(default=django.utils.timezone.now)),
                ('DATRECU', models.DateTimeField(default=django.utils.timezone.now)),
                ('RR', models.FloatField(null=True)),
                ('DRR', models.FloatField(null=True, verbose_name='Durée de la précipitation en min')),
                ('STATUS_DRR', models.IntegerField(null=True, verbose_name='1 - Relevé manuel, 2 - Relevé automatique')),
                ('TN', models.FloatField(null=True)),
                ('HTN', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de TN')),
                ('TX', models.FloatField(null=True)),
                ('HTX', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de TX')),
                ('TM', models.FloatField(null=True)),
                ('TAMPLI', models.FloatField(null=True)),
                ('DG', models.IntegerField(null=True, verbose_name='Duree du gel en min')),
                ('PMERM', models.FloatField(null=True)),
                ('PMERMIN', models.FloatField(null=True)),
                ('FXY', models.FloatField(null=True, verbose_name="Valeur max de FF dans l'heure")),
                ('DXY', models.FloatField(null=True, verbose_name='Direction de FXY')),
                ('HXY', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de FXY')),
                ('FXI', models.FloatField(null=True, verbose_name="Rafales max de FF dans l'heure")),
                ('DXI', models.FloatField(null=True, verbose_name='Direction de FXI')),
                ('HXI', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de FXI')),
                ('UM', models.FloatField(null=True)),
                ('UN', models.FloatField(null=True, verbose_name="Humidite minimale dans l'heure")),
                ('HUN', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de UN')),
                ('UX', models.FloatField(null=True, verbose_name="Humidite maximale dans l'heure")),
                ('HUX', models.DateTimeField(null=True, verbose_name='AAAA MM JJ HH MM de UX')),
                ('ETPM', models.FloatField(null=True)),
                ('HFM', models.FloatField(null=True)),
                ('HFMX', models.FloatField(null=True)),
                ('HFMN', models.FloatField(null=True)),
                ('HSM', models.FloatField(null=True)),
                ('HSMX', models.FloatField(null=True)),
                ('HSMN', models.FloatField(null=True)),
                ('TS', models.FloatField(null=True)),
                ('TSX', models.FloatField(null=True)),
                ('TSN', models.FloatField(null=True)),
                ('INST', models.IntegerField(null=True, verbose_name="Duree d'insolation quotidienne (min)")),
                ('NUM_POSTE', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE')),
            ],
        ),
        migrations.CreateModel(
            name='RECMENS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PARAM', models.CharField(max_length=25, null=True)),
                ('DATRECU', models.DateTimeField(default=django.utils.timezone.now)),
                ('NUM_MOIS', models.IntegerField(null=True, verbose_name='13 = record mini annuel, 14 = record maxi annuel')),
                ('DATDEB', models.DateTimeField(null=True)),
                ('DATFIN', models.DateTimeField(null=True)),
                ('RECORD', models.FloatField(null=True)),
                ('DATERECORD', models.DateTimeField(null=True)),
                ('NUM_POSTE', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE')),
            ],
        ),
        migrations.RemoveField(
            model_name='ins',
            name='RR5MN',
        ),
        migrations.AddField(
            model_name='ins',
            name='DATJ',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='AAAA-MM-JJ HH-MM de la mesure'),
        ),
        migrations.AddField(
            model_name='ins',
            name='DATRECU',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='AAAA-MM-JJ HH-MM de la derniere modification'),
        ),
        migrations.AddField(
            model_name='ins',
            name='DD',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='DXI',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='ETP',
            field=models.FloatField(default=None, null=True, verbose_name='Evapotranspiration'),
        ),
        migrations.AddField(
            model_name='ins',
            name='FF',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='FXI',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='HF',
            field=models.FloatField(default=None, null=True, verbose_name='Humidite du feuillage'),
        ),
        migrations.AddField(
            model_name='ins',
            name='HS',
            field=models.FloatField(default=None, null=True, verbose_name='Humidite du sol'),
        ),
        migrations.AddField(
            model_name='ins',
            name='IC',
            field=models.FloatField(default=None, null=True, verbose_name='Indice de chaleur'),
        ),
        migrations.AddField(
            model_name='ins',
            name='PMER',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='RAD',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='RR',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='RRI',
            field=models.FloatField(default=None, null=True, verbose_name='Intensité max des precipitations'),
        ),
        migrations.AddField(
            model_name='ins',
            name='T',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='TD',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='TS',
            field=models.FloatField(default=None, null=True, verbose_name='Temperature du sol'),
        ),
        migrations.AddField(
            model_name='ins',
            name='U',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='ins',
            name='UV',
            field=models.FloatField(default=None, null=True, verbose_name='Indice UV'),
        ),
        migrations.AddField(
            model_name='ins',
            name='WINDCHILL',
            field=models.FloatField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name='commune',
            name='COMMUNE',
            field=models.CharField(max_length=25),
        ),
        migrations.AlterField(
            model_name='pays',
            name='NOMPAYS',
            field=models.CharField(max_length=20),
        ),
        migrations.AddField(
            model_name='poste',
            name='COMMUNE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.COMMUNE'),
        ),
        migrations.AddField(
            model_name='panne',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='mensq',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='maintenance',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='histpost',
            name='COMMUNE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.COMMUNE'),
        ),
        migrations.AddField(
            model_name='histpost',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='histmaint',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='h',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
        migrations.AddField(
            model_name='decadq',
            name='NUM_POSTE',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.POSTE'),
        ),
    ]
