#!/srv/weewx/virtualenv/bin/python
#
#    Copyright (c) 2009-2015 Tom Keffer <tkeffer@gmail.com>
#
#    See the file LICENSE.txt for your rights.
#    modified by Hubert QUETELARD
#    May 2021
#
"""Executable that can create json files for MeteoR-OI."""

import socket
import syslog

import datetime
import optparse
import syslog
import sys
import time


import user.extensions #@UnusedImport
import weewx.station
import weewx.reportengine
import weecfg
from weeutil.weeutil import timestamp_to_string

description = """Create json files defined in the specified configuration file.
Use this utility to create json files."""

usage = """%prog:[--from=YYYY-mm-dd HH:MM] [--to=YYYY-mm-dd HH:MM] [--help]"""

def main():

    # Set defaults for the system logger:
    syslog.openlog('wee_json', syslog.LOG_PID | syslog.LOG_CONS)

    # Create a command line parser:
    parser = optparse.OptionParser(description=description, usage=usage)
    
    # Add the various options:
    parser.add_option("--from", dest="from_date", type=str, metavar="YYYY-mm-dd HH:MM",
                      help="Start with this date.")
    parser.add_option("--to", dest="to_date", type=str, metavar="YYYY-mm-dd HH:MM",
                      help="End with this date.")
    
    # Now we are ready to parse the command line:
    (options, args) = parser.parse_args()
    config_path, config_dict = weecfg.read_config('weewx_dev.conf', args)
    
    print "Using configuration file %s" % config_path

    start_d, stop_d = _parse_dates(options)
    start_d = round(start_d)
    stop_d  = round(stop_d)
    
    if stop_d is None:
        print "Generating json file from to current time"
    else:
        print "Generating from requested time"#, timestamp_to_string(stop_d)
        
    # Look for the debug flag. If set, ask for extra logging
    weewx.debug = int(config_dict.get('debug', 0))
    if weewx.debug:
        syslog.setlogmask(syslog.LOG_UPTO(syslog.LOG_DEBUG))
    else:
        syslog.setlogmask(syslog.LOG_UPTO(syslog.LOG_INFO))

    socket.setdefaulttimeout(10)

    stn_info = weewx.station.StationInfo(**config_dict['Station'])
    
    t = weewx.reportengine.StdReportEngine(config_dict, stn_info, start_ts=start_d, gen_ts=stop_d)

    # Although the report engine inherits from Thread, we can just run it in the main thread:
    t.run()
    
def _parse_dates(options):
    """Parse --from and --to command line options.

        Inputs:
            options: the optparse options

        Returns: A two-way tuple (start_d, stop_d), where
            start_d: A datetime.date object holding the first date. May be None
            stop_d:  A dateimte.date object holding the last date. May be None
    """

    # Default is None, unless user has specified an option
    _first_d = None
    _last_d = None

    if options.from_date:
        try:
            _first_d = datetime.datetime.strptime(options.from_date, "%Y-%m-%d %H:%M")
            tuple = _first_d.timetuple()
            _first_d = time.mktime(tuple)
            print(_first_d)
        except ValueError:
            raise ValueError("Invalid --from option specified.")

    if options.to_date:
        try:
            _last_d = datetime.datetime.strptime(options.to_date, "%Y-%m-%d %H:%M")
            tuple = _last_d.timetuple()
            _last_d = time.mktime(tuple)
            print(_last_d)
        except ValueError:
            raise ValueError("Invalid --to option specified.")

    if _first_d and _last_d:
        # If both --from and --to have been specified, make sure the latter is greater
        # than the former
        if _last_d < _first_d:
            raise weewx.ViolatedPrecondition("--from value is later than --to value.")

    return (_first_d, _last_d)

if __name__=="__main__" :
    main()
