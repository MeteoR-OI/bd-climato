# Generated by Django 5.0.2 on 2024-05-22 17:40

import app.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('time', app.models.DateTimeFieldNoTZ(max_length=30, verbose_name="date'")),
                ('timeend', app.models.DateTimeFieldNoTZ(max_length=30, verbose_name="date'")),
                ('text', models.CharField(max_length=100, verbose_name='source')),
                ('tags', models.CharField(max_length=100, verbose_name='source')),
            ],
            options={
                'db_table': 'annotations',
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_utc', app.models.DateTimeFieldNoTZ(max_length=30, verbose_name='date')),
                ('source', models.CharField(max_length=100, verbose_name='source')),
                ('level', models.CharField(max_length=20, verbose_name='niveau')),
                ('reason', models.TextField(verbose_name='raison')),
                ('details', models.JSONField(null=True, verbose_name='details')),
                ('active', models.BooleanField(db_default=True, null=True, verbose_name='active')),
            ],
            options={
                'db_table': 'incidents',
            },
        ),
        migrations.CreateModel(
            name='Mesure',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la mesure')),
                ('json_input', models.CharField(max_length=20, null=True, verbose_name='Clé utilisée dans le json')),
                ('json_input_bis', models.CharField(max_length=20, null=True, verbose_name='Autre clé utilisée dans le json')),
                ('archive_col', models.CharField(max_length=20, null=True, verbose_name='nom colonne table weewx.archive')),
                ('archive_table', models.CharField(db_default=None, max_length=20, null=True, verbose_name='nom table weewx.archive')),
                ('field_dir', models.SmallIntegerField(null=True, verbose_name='id de la mesure wind dans table weewx.archive')),
                ('max', models.BooleanField(db_default=True, null=True, verbose_name='Calcul des max')),
                ('min', models.BooleanField(db_default=True, null=True, verbose_name='Calcul des min')),
                ('agreg_type', models.IntegerField(choices=[(0, 'None'), (1, 'Avg'), (2, 'Sum'), (3, 'Max'), (4, 'Min')], db_default=0, null=True, verbose_name="Type d'agregation des donnees")),
                ('is_wind', models.BooleanField(db_default=False, null=True, verbose_name='Calcul du wind_dir')),
                ('allow_zero', models.BooleanField(db_default=True, null=True, verbose_name='Zero est une valeur valide')),
                ('convert', models.JSONField(null=True, verbose_name='Conversion')),
                ('j', models.JSONField(null=True, verbose_name='json data')),
            ],
            options={
                'db_table': 'mesures',
            },
        ),
        migrations.CreateModel(
            name='Poste',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('meteor', models.CharField(max_length=50, verbose_name='Code station')),
                ('delta_timezone', models.SmallIntegerField(verbose_name='delta heure locale et UTC')),
                ('data_source', models.IntegerField(choices=[(0, 'None'), (1, 'Meteor Oi'), (2, 'Meteo Fr'), (3, 'Ovpf')], db_default=0, null=True, verbose_name='Source des donnees')),
                ('load_type', models.IntegerField(choices=[(0, 'None'), (1, 'Load From Dump'), (2, 'Load From Json'), (4, 'Load From Dump Then Json'), (8, 'Load Csv For Meteofr'), (16, 'Load Csv For Ovpf')], db_default=0, null=True, verbose_name='Type de chargement des donnees')),
                ('type', models.CharField(db_default='', max_length=50, null=True, verbose_name='Type de station')),
                ('altitude', models.FloatField(db_default=0, null=True, verbose_name='Altitude')),
                ('lat', models.FloatField(db_default=0, null=True, verbose_name='Latitude')),
                ('long', models.FloatField(db_default=0, null=True, verbose_name='Longitude')),
                ('info', models.JSONField(null=True, verbose_name='autre info station')),
                ('stop_date', app.models.DateTimeFieldNoTZ(null=True, verbose_name="Datetime local d'arret de la station")),
                ('other_code', models.CharField(db_default='', max_length=50, null=True, verbose_name='Autre code utilisé dans la data source')),
                ('owner', models.CharField(db_default='', max_length=50, null=True, verbose_name='Propriétaire')),
                ('email', models.CharField(db_default='', max_length=50, null=True, verbose_name='E-Mail')),
                ('phone', models.CharField(db_default='', max_length=50, null=True, verbose_name='Téléphone')),
                ('quartier', models.CharField(db_default='', max_length=50, null=True, verbose_name='Addresse')),
                ('city', models.CharField(db_default='', max_length=50, null=True, verbose_name='Ville')),
                ('country', models.CharField(db_default='', max_length=50, null=True, verbose_name='Pays')),
                ('comment', models.TextField(db_default='', null=True, verbose_name='Commentaire')),
                ('last_obs_date_local', app.models.DateTimeFieldNoTZ(db_default='2000-01-01T00:00:00', null=True, verbose_name='Datetime UTC de derniere reception de donnees')),
                ('last_obs_id', models.BigIntegerField(db_default=0, null=True, verbose_name='ID obs de la derniere reception de donnees')),
                ('info_sync', models.JSONField(null=True, verbose_name='Autre info de synchro')),
            ],
            options={
                'db_table': 'postes',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name="id de l'observation")),
                ('date_local', app.models.DateTimeFieldNoTZ(verbose_name='datetime locale fin période observation')),
                ('date_utc', app.models.DateTimeFieldNoTZ(verbose_name='datetime UTC fin période observation')),
                ('duration', models.SmallIntegerField(verbose_name='durée mesure')),
                ('barometer', models.FloatField(null=True, verbose_name='pression niveau mer')),
                ('pressure', models.FloatField(null=True, verbose_name='pression station')),
                ('in_temp', models.FloatField(null=True, verbose_name='température intérieure')),
                ('out_temp', models.FloatField(null=True, verbose_name='température extérieure')),
                ('dewpoint', models.FloatField(null=True, verbose_name='point de rosée')),
                ('etp', models.FloatField(null=True, verbose_name='somme etp')),
                ('heatindex', models.FloatField(null=True, verbose_name='heatindex')),
                ('extra_temp1', models.FloatField(null=True, verbose_name='extra temperature 1')),
                ('extra_temp2', models.FloatField(null=True, verbose_name='extra temperature 2')),
                ('extra_temp3', models.FloatField(null=True, verbose_name='extra temperature 3')),
                ('in_humidity', models.FloatField(null=True, verbose_name='humidité intérieure')),
                ('out_humidity', models.FloatField(null=True, verbose_name='humidité')),
                ('extra_humid1', models.FloatField(null=True, verbose_name='extra humidité 1')),
                ('extra_humid2', models.FloatField(null=True, verbose_name='extra humidité 2')),
                ('leaf_temp1', models.FloatField(null=True, verbose_name='temp des feuilles no 1')),
                ('leaf_temp2', models.FloatField(null=True, verbose_name='temp des feuilles no 2')),
                ('leaf_wet1', models.FloatField(null=True, verbose_name='humidité des feuilles no 1')),
                ('leaf_wet2', models.FloatField(null=True, verbose_name='humidité des feuilles no 2')),
                ('radiation', models.FloatField(null=True, verbose_name='radiation')),
                ('radiation_rate', models.FloatField(null=True, verbose_name='radiation rate')),
                ('uv', models.FloatField(null=True, verbose_name='indice UV')),
                ('rain', models.FloatField(null=True, verbose_name='pluie')),
                ('rain_utc', models.FloatField(null=True, verbose_name='pluie')),
                ('rain_rate', models.FloatField(null=True, verbose_name='rain_rate')),
                ('rx', models.FloatField(null=True, verbose_name='taux reception station')),
                ('soil_moist1', models.FloatField(null=True, verbose_name='humidité du sol niveau du sol')),
                ('soil_moist2', models.FloatField(null=True, verbose_name='humidité du sol niveau 2')),
                ('soil_moist3', models.FloatField(null=True, verbose_name='humidité du sol niveau 3')),
                ('soil_moist4', models.FloatField(null=True, verbose_name='humidité du sol niveau 4')),
                ('soil_temp1', models.FloatField(null=True, verbose_name='température du sol niveau du sol')),
                ('soil_temp2', models.FloatField(null=True, verbose_name='température du sol niveau 2')),
                ('soil_temp3', models.FloatField(null=True, verbose_name='température du sol niveau 3')),
                ('soil_temp4', models.FloatField(null=True, verbose_name='température du sol niveau 4')),
                ('voltage', models.FloatField(null=True, verbose_name='voltage')),
                ('wind_dir', models.FloatField(null=True, verbose_name='direction moyenne du vent sur la période')),
                ('wind', models.FloatField(null=True, verbose_name='vitesse moyenne du vent sur la période')),
                ('wind_gust_dir', models.FloatField(null=True, verbose_name='direction de la rafale max')),
                ('wind_gust', models.FloatField(null=True, verbose_name='rafale max')),
                ('wind10', models.FloatField(null=True, verbose_name='vent moyen sur 10')),
                ('wind10_dir', models.FloatField(null=True, verbose_name='direction moyenne du vent sur 10 mn')),
                ('wind10_omm', models.FloatField(null=True, verbose_name='vent moyen 10 mn OMM')),
                ('windchill', models.FloatField(null=True, verbose_name='windchill')),
                ('zone_1', models.FloatField(null=True, verbose_name='zone 1')),
                ('zone_2', models.FloatField(null=True, verbose_name='zone 2')),
                ('zone_3', models.FloatField(null=True, verbose_name='zone 3')),
                ('zone_4', models.FloatField(null=True, verbose_name='zone 4')),
                ('zone_5', models.FloatField(null=True, verbose_name='zone 5')),
                ('zone_6', models.FloatField(null=True, verbose_name='zone 6')),
                ('zone_7', models.FloatField(null=True, verbose_name='zone 7')),
                ('zone_8', models.FloatField(null=True, verbose_name='zone 8')),
                ('zone_9', models.FloatField(null=True, verbose_name='zone 9')),
                ('zone_10', models.FloatField(null=True, verbose_name='zone 10')),
                ('j', models.JSONField(null=True, verbose_name='données autres')),
                ('qa_all', models.IntegerField(db_default=0, null=True, verbose_name='qa_modifications')),
                ('qa_details', models.JSONField(null=True, verbose_name='details de qualite par champs')),
                ('qa_modifications', models.IntegerField(db_default=0, null=True, verbose_name='nombre de modifications')),
                ('poste', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.poste')),
            ],
            options={
                'db_table': 'obs',
                'unique_together': {('id', 'date_local')},
            },
        ),
        migrations.CreateModel(
            name='XMax',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='id du maximum')),
                ('obs_id', models.BigIntegerField(null=True, verbose_name="id de l'observation")),
                ('date_local', app.models.DateTimeFieldNoTZ(verbose_name="date locale de la fin de la periode d'observation")),
                ('max', models.FloatField(verbose_name='valeur maximum')),
                ('max_time', app.models.DateTimeFieldNoTZ(verbose_name="date locale de l'extrême")),
                ('max_dir', models.FloatField(null=True, verbose_name='direction du maximum')),
                ('qa_max', models.SmallIntegerField(choices=[(0, 'Unset'), (1, 'Validated'), (9, 'Unvalidated')], db_default=0, null=True, verbose_name='Code Qualité')),
                ('mesure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.mesure')),
                ('poste', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.poste')),
            ],
            options={
                'db_table': 'x_max',
                'indexes': [models.Index(fields=['obs_id', 'date_local'], name='x_max_obs_id')],
            },
        ),
        migrations.CreateModel(
            name='XMin',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='id du minimum')),
                ('obs_id', models.BigIntegerField(null=True, verbose_name="id de l'observation")),
                ('date_local', app.models.DateTimeFieldNoTZ(verbose_name="date locale de la fin de la periode d'observation")),
                ('min', models.FloatField(verbose_name='valeur minimum')),
                ('min_time', app.models.DateTimeFieldNoTZ(verbose_name="date locale de l'extrême")),
                ('qa_min', models.SmallIntegerField(choices=[(0, 'Unset'), (1, 'Validated'), (9, 'Unvalidated')], db_default=0, null=True, verbose_name='Code Qualité')),
                ('mesure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.mesure')),
                ('poste', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.poste')),
            ],
            options={
                'db_table': 'x_min',
                'indexes': [models.Index(fields=['obs_id', 'date_local'], name='x_min_obs_id')],
            },
        ),
    ]
