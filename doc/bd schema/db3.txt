
drop table if exists obs;
drop table if exists poste;
drop table if exists mesure;

create table poste(
    id smallserial primary key not null,
    meteor varchar(20),
    delta_timezone smallint
);

create table mesure(
    id smallserial primary key not null,
    name varchar(100),
    key varchar(20),
    deca smallint,
    max bool,
    max_deca smallint,
    min bool,
    min_deca smallint
);

create table obs (
    id bigserial,
    id_poste smallint references poste(id) not null,
    time timestamp not null,
    duration smallint not null,
    out_temp float null,
    windchill float null,
    dewpoint float null,
    soiltemp float null,
    humidity float null,
    barometer float null,
    pressure float null,
    wind float null,
    wind_max float null,
    wind_dir smallint null,
    wind10 float null,
    wind10_dir smallint null,
    rain float null,
    rain_rate float null,
    uv_indice smallint null,
    radiation float null,
    in_temp float null,
    in_humidity float null,
    rx float null,
    voltage float null
);

select create_hypertable('obs', 'time');

SELECT set_chunk_time_interval('obs', 6048000000000);

with recursive serie(i) as
(select 1
 UNION ALL
 select i + 1 from serie where i < 30)
 insert into poste(id, meteor, delta_timezone)
select i, 'meteor ' || i, 0 from serie;
select count(*) from poste;

with recursive serie(i) as
(select 1
 UNION ALL
 select i + 1 from serie where i < 24)
 insert into mesure(id, name, key, deca, max, max_deca, min, min_deca)
 select 
    i,
    'mesure_' || i,
    'key_' || i,
    0,
    true,
    0,
    true,
    0 from serie;
select count(*) from mesure;


do $$
declare start_dt timestamp;
declare nb_rows_total int;
declare nb_rows_one_station int;
declare cc_count_start int;
declare cc_count_end int;
declare nb_stations int;
begin
  select 30 into nb_stations;
  select coalesce(max(time) + interval '5 minutes', '2022-01-01 00:00:00') into start_dt from obs;
  select ((trunc(trunc(( (extract(epoch from now())) - (extract(epoch from  start_dt)) )/60)/5)) * nb_stations) - 1 into nb_rows_total;
  select (nb_rows_total / nb_stations ) into nb_rows_one_station;
  select count(*) into cc_count_start from obs;
  raise notice 'start_dt" (%), nb_rows_total: (%), nb row per station: (%)', start_dt, nb_rows_total + 1, nb_rows_one_station;
  if nb_rows_total > 0 then
        with recursive serie(i) as
            (select 0
            UNION ALL
            select i + 1 from serie where i < nb_rows_total)

        insert into obs(
                id_poste,
                time,
                duration,
                out_temp,
                windchill,
                dewpoint,
                soiltemp,
                humidity,
                barometer,
                pressure,        
                wind,
                wind_max,
                wind_dir,
                wind10,
                wind10_dir,
                rain,
                rain_rate,
                uv_indice,
                radiation,
                in_temp,
                in_humidity,
                rx,
                voltage)

        select
        ((i%nb_stations)+1),
        start_dt + (trunc(i/nb_stations) * interval '5 minutes'),
        5,
        (random() * 30),
        (random() * 30),
        (random() * 30),
        (random() * 30),
        (random() * 100),
        (random() * 30 + 995),
        (random() * 30 + 995),
        (random() * 10),
        (random() * 10),
        (random() * 360),
        (random() * 10),
        (random() * 360),
        (random() * 20),
        (random() * 5),
        trunc((random() * 12)),
        (random() * 30),
        (random() * 30),
        (random() * 100),
        (random() * 20) + 80,
        (random() * 10) + 215
        from serie;
    end if;
    select count(*) into cc_count_end from obs;
    raise notice 'row added: (%), rows per station: (%)', (cc_count_end - cc_count_start), ((cc_count_end - cc_count_start)/nb_stations);

end $$
;



select min(time), max(time) from obs;
        min         |         max
---------------------+---------------------
 2017-01-01 00:00:00 | 2022-03-11 19:55:00

select count(*) from obs;
  count
---------
4 238 150

-- show global info 
SELECT * FROM timescaledb_information.hypertables;

-- show chunks info
SELECT chunk_name, range_start, range_end FROM timescaledb_information.chunks WHERE hypertable_name = 'obs' order by 2 desc;
22 chunks

-- show row count for each chunks
SELECT ts.chunk_name, count(o.id)
    FROM timescaledb_information.chunks ts join obs o on o.time >= ts.range_start and o.time < ts.range_end
    WHERE hypertable_name = 'obs'
    group by 1
    order by 1
;
     chunk_name      | count
---------------------+--------
 _hyper_1_1254_chunk | 141120
 _hyper_1_1255_chunk | 201600
 ...
 _hyper_1_1274_chunk | 201600
 _hyper_1_1275_chunk |  65030

-- get size
select 
    chunk_name,
    pg_size_pretty(table_bytes) as table_bytes,
    pg_size_pretty(index_bytes) as index_bytes,
    pg_size_pretty(total_bytes) as total_bytes
from chunks_detailed_size('obs');

select 
    pg_size_pretty(table_bytes) as table_bytes,
    pg_size_pretty(index_bytes) as index_bytes,
    pg_size_pretty(total_bytes) as total_bytes
from hypertable_detailed_size('obs');


with size_total as (
        select sum(total_bytes) as total_size_byte,
               sum(after_compression_total_bytes) as compressed_total_bytes
        from chunks_detailed_size('obs') as o
             inner join chunck_compression_stats('obs') c
               on o.chunk_schema = c.chunk_shema

)
select pg_size_pretty(total_size_compressed(total_size-compressed-total-size)) as total_uncompressed,
        pg_size_pretty(compressed_total_bytes) as total_compressed,
        pg_size_pretty(total_size_bytes) as total_size
        from size_totals;

SELECT * FROM timescaledb_information.compression_settings WHERE hypertable_name = 'obs';

SELECT * from timescaledb_information.dimensions ORDER BY hypertable_name, dimension_number;

  SELECT * FROM timescaledb_information.hypertables WHERE hypertable_name = 'obs';

  -- chunck length
  SELECT h.table_name, c.interval_length FROM _timescaledb_catalog.dimension c
  JOIN _timescaledb_catalog.hypertable h ON h.id = c.hypertable_id;


select 
    p.meteor,
    timescaledb_experimental.time_bucket_ng('12 hour', o.time),
    sum(duration) duration,
    avg(out_temp) out_temp,
    avg(windchill) windchill,
    avg(dewpoint) dewpoint,
    avg(soiltemp) soiltemp,
    avg(humidity) humidity,
    avg(barometer) barometer,
    avg(pressure) pressure,        
    avg(wind) wind,
    avg(wind_max) wind_max,
    avg(wind_dir) wind_dir,
    avg(wind10) wind10,
    avg(wind10_dir) wind10_dir,
    sum(rain) rain,
    avg(rain_rate) rain_rate,
    avg(uv_indice) uv_indice,
    avg(radiation) radiation,
    avg(in_temp) in_temp,
    avg(in_humidity) in_humidity,
    avg(rx) rx,
    avg(voltage) voltage

    from obs o join poste p on p.id = o.id_poste
    where o.time > now()  - interval '1 days' 
    group by 1,2
    order by 1,2
;

select id, time, duration from obs
where id_poste = 1 and time > now()  - interval '1 hour' 
order by time;

Grafana
1 mesure for 1 station, with n last measures
=============================================
select time, case when step = 0 then 'now' else (-interval)::text END AS metric, moyenne from
(select step, (step||${aggreg:singlequote})::interval as interval from generate_series(0, $steps_histo) g(step)) my_steps
 join lateral
(SELECT
    timescaledb_experimental.time_bucket_ng('15m', o.time + interval)::timestamptz AS time, avg(o.$mesure) AS moyenne
    FROM obs o join poste p on p.id = o.id_poste
    WHERE p.meteor = ${station:singlequote} and
          o.time between $__timeFrom()::timestamptz - interval and $__timeTo()::timestamptz - interval
    GROUP BY 1
    ORDER BY 1
) l on true
order by 1
