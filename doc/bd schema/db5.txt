CREATE EXTENSION postgis;
CREATE EXTENSION timescaledb;

drop table if exists obs;
drop table if exists postes;
drop table if exists mesures;

create table postes(
    id smallserial primary key not null,
    meteor varchar(20),
    delta_timezone smallint,
    altitude smallint null,
    long float null,
    lat float null
);
insert into postes(meteor, delta_timezone, altitude, long, lat) values
('BAG280', 0, 100, 10 , 20),
('BBF015', 0, 100, 10 , 20),
('BDN240', 0, 100, 10 , 20),
('BER590', 0, 100, 10 , 20),
('BOCO1370', 0, 100, 10 , 20),
('BOMU1610', 0, 100, 10 , 20),
('BRT155', 0, 100, 10 , 20),
('BRT240', 0, 100, 10 , 20),
('CAM015', 0, 100, 10 , 20),
('CHAR645', 0, 100, 10 , 20),
('CHP690', 0, 100, 10 , 20),
('ELH675', 0, 100, 10 , 20),
('ESB005', 0, 100, 10 , 20),
('ESH555', 0, 100, 10 , 20),
('FAY040', 0, 100, 10 , 20),
('GDC030', 0, 100, 10 , 20),
('LCV050', 0, 100, 10 , 20),
('MAT315', 0, 100, 10 , 20),
('MTG280', 0, 100, 10 , 20),
('MTG320', 0, 100, 10 , 20),
('MVP860', 0, 100, 10 , 20),
('NDLP1520', 0, 100, 10 , 20),
('PFD040', 0, 100, 10 , 20),
('RAM450', 0, 100, 10 , 20),
('ROQ070', 0, 100, 10 , 20),
('SBBM100', 0, 100, 10 , 20),
('TAM1790', 0, 100, 10 , 20),
('TAR600', 0, 100, 10 , 20),
('TBL105', 0, 100, 10 , 20),
('TRG170', 0, 100, 10 , 20),
('TRM490', 0, 100, 10 , 20)
;
select 'nb postes: ' || count(*) from postes;

('BP130', 0, 100, 10 , 20),
('CRT630', 0, 100, 10 , 20),
('CRT635', 0, 100, 10 , 20),
('GFD010', 0, 100, 10 , 20),
('LAN030', 0, 100, 10 , 20),
('PAH575', 0, 100, 10 , 20),
('PAM320', 0, 100, 10 , 20),
('PSL310', 0, 100, 10 , 20),
('SPC010', 0, 100, 10 , 20),
('TAN1270', 0, 100, 10 , 20),
('VIN110', 0, 100, 10 , 20),
('YYY111', 0, 100, 10 , 20),


create table mesures(
    id smallserial primary key not null,
    name varchar(100) not null,
    json_input varchar(20) not null,
    archive_col varchar(20) not null,
    val_deca smallint default 0,
    min bool default true,
    min_deca smallint default 0,
    max bool default true,
    max_deca smallint default 0,
    is_avg boolean not null,
    is_wind boolean not null,
    omm_link smallint null,
    allow_zero boolean not null
);

insert into mesures
(id,      name    ,     json_input,       archive_col,     val_deca, min,  min_deca,  max,  max_deca, is_avg, is_wind, omm_link, allow_zero) values
( 1, 'temperature',     'out_temp',       'outTemp',            0,   true,    0,     true,    0,      true,   false,    null,      true),
( 2, 'temp omm',        'out_temp_omm',   'outTemp_omm',        0,   true,    5,     true,   -7,      true,   false,       1,      true),
( 3, 'windchill',       'windchill',      'windchill',          0,   true,    0,     false,   0,      true,   false,    null,      true),
( 4, 'heatindex',       'heatindex',      'heatindex',          0,   false,    0,    true,    0,      true,   false,    null,      true),
( 5, 'dewpoint',        'dewpoint',       'dewpoint',           0,   true,    0,     true,    0,      true,   false,    null,      true),
( 6, 'soiltemp',        'soiltemp',       'soilTemp1',          0,   true,    0,     false,   0,      true,   false,    null,      true),
( 7, 'humidity',        'humidity',       'outHumidity',        0,   true,    0,     true,    0,      true,   false,    null,      true),
( 8, 'humidity omm',    'humidity_omm',   'outHumidity_omm',    0,   true,    0,     true,    0,      true,   false,       7,      true),
( 9, 'barometer',       'barometer',      'barometer',          0,   true,    0,     true,    0,      true,   false,    null,      true),
(10, 'barometer omm',   'barometer_omm',  'barometer_omm',      0,   true,    0,     true,    0,      true,   false,       9,      true),
(11, 'pressure',        'pressure',       'pressure',           0,   true,    0,     true,    0,      true,   false,    null,      true),
(12, 'rain',            'rain',           'rain',               0,   true,    0,     true,    0,     false,   false,    null,      true),
(13, 'rain omm',        'rain_omm',       'rain_omm',           7,   false,   0,     true,    7,     false,   false,      12,      true),
(14, 'rain rate',       'rain_rate',      'rainRate',           0,   false,   0,     true,    0,      true,   false,    null,      true),
(15, 'wind',            'wind',           'wind',               0,   true,    0,     true,    0,      true,    true,    null,      true),
(16, 'gust',            'gust',           'windGust',           0,   false,   0,     true,    0,      true,   false,    null,      true),
(17, 'wind 10',         'wind10',         'wind',               0,   true,    0,     true,    0,      true,    true,    null,      true),
(18, 'wind 10 omm',     'wind10_omm',     'wind_omm',           0,   false,   0,     true,    0,      true,    true,      17,      true),
(19, 'uv_indice',       'uv',             'UV',                 0,   false,   0,     true,    0,      true,   false,    null,      true),
(20, 'radiation',       'radiation',      'radiation',          0,   true,    0,     true,    0,      true,   false,    null,      true),
(21, 'etp',             'etp',            'ET',                 0,   true,    0,     true,    0,     false,   false,    null,      true),
(22, 'temp inside',     'in_temp',        'inTemp',             0,   true,    0,     true,    0,      true,   false,    null,      true),
(23, 'humidity inside', 'in_humidity',    'inHumidity',         0,   true,    0,     true,    0,      true,   false,    null,      true),
(24, 'rx',              'rx',             'rxCheckPercent',     0,   true,    0,     true,    0,      true,   false,    null,      true),
(25, 'voltage',         'voltage',        'consBatteryVoltage', 0,   true,    0,     true,    0,      true,   false,    null,      true)
;
select 'nb mesures: ' || count(*) from mesures;


create table obs (
    id bigserial,   -- no releve
    poste_id smallint references postes(id) not null,
    time timestamp not null,
    duration smallint not null,
    out_temp float null,
    out_temp_omm float null,
    windchill float null,
    dewpoint float null,
    heatindex float null,
    soiltemp float null,
    humidity float null,
    humidity_omm float null,
    barometer float null,
    barometer_omm float null,
    pressure float null,
    wind float null,
    wind_dir smallint null,
    wind_gust float null,
    wind_gust_dir smallint null,
    wind10 float null,
    wind10_dir smallint null,
    wind10_omm float null,
    rain float null,
    rain_omm float null,
    rain_rate float null,
    uv_indice smallint null,
    radiation float null,
    etp_sum float null,
    in_temp float null,
    in_humidity float null,
    rx float null,
    voltage float null,
    j jsonb null
);


select create_hypertable('obs', 'time');

SELECT set_chunk_time_interval('obs', 6048000000000);


create table extremes (
    id bigserial,
    poste_id smallint references postes(id) not null,
    date date not null,
    id_obs bigint not null,
    mesure_id smallint references mesures(id) not null,
    min float null,
    mintime timestamp null,
    max float null,
    maxtime timestamp null,
    max_dir int null
);

select create_hypertable('extremes', 'date');

SELECT set_chunk_time_interval('extremes', 25920000000000);

-- ------------------
-- sql select/insert
-- ------------------
insert into obs(poste_id, time, duration, out_temp, out_temp_omm, windchill, dewpoint, soiltemp,
        humidity, humidity_omm, barometer, barometer_omm, heatindex, pressure, wind, wind_dir, wind10_omm,
        wind_gust, wind_gust_dir, wind10, wind10_dir, rain, rain_omm, rain_rate, uv_indice, radiation,
        etp_sum, in_temp, in_humidity, rx, voltage)
    (select poste_id, time, duration, out_temp, out_temp_omm, windchill, dewpoint, soiltemp,
            humidity, humidity_omm, barometer, barometer_omm, heatindex, pressure, wind, wind_dir, wind10_omm,
            wind_gust, wind_gust_dir, wind10, wind10_dir, rain, rain_omm, rain_rate, uv_indice, radiation,
            etp_sum, in_temp, in_humidity, rx, voltage from obs_old order by time)
;

insert into extremes(poste_id, date, id_obs, mesure_id, min, mintime, max, maxtime, max_dir)
    (select poste_id, date, id_obs, mesure_id, min, mintime, max, maxtime, max_dir
       from x2 order by date
    );

-- ------------------
-- materialized view
-- ------------------
create materialized view obs_day WITH (timescaledb.continuous) as
 select 
    timescaledb_experimental.time_bucket_ng('1 day', time) as time,
    poste_id,
    avg(barometer) as barometer,
    avg(barometer_omm) as barometer_omm,
    avg(dewpoint) as dewpoint,
    sum(etp) as etp,
    avg(extra_humid1) as extra_humid1,
    avg(extra_humid2) as extra_humid2,
    avg(extra_temp1) as extra_temp1,
    avg(extra_temp2) as extra_temp2,
    avg(extra_temp3) as extra_temp3,
    avg(hail) as hail,
    avg(hail_rate) as hail_rate,
    avg(heatindex) as heatindex,
    avg(heating_temp) as heating_temp,
    avg(in_humidity) as in_humidity,
    avg(in_temp) as in_temp,
    avg(leaf_temp1) as leaf_temp1,
    avg(leaf_temp2) as leaf_temp2,
    avg(leaf_wet1) as leaf_wet1,
    avg(leaf_wet2) as leaf_wet2,
    avg(out_humidity) as out_humidity,
    avg(out_humidity_omm) as out_humidity_omm,
    avg(out_temp) as out_temp,
    avg(out_temp_omm) as out_temp_omm,
    avg(pressure) as pressure,
    max(radiation) as radiation,
    sum(rain) as rain,
    sum(rain_omm) as rain_omm,
    avg(rain_rate) as rain_rate,
    avg(rx) as rx,
    avg(soil_moist1) as soil_moist1,
    avg(soil_moist2) as soil_moist2,
    avg(soil_moist3) as soil_moist3,
    avg(soil_moist4) as soil_moist4,
    avg(soil_temp1) as soil_temp1,
    avg(soil_temp2) as soil_temp2,
    avg(soil_temp3) as soil_temp3,
    avg(soil_temp4) as soil_temp4,
    max(uv) as uv,
    avg(voltage) as voltage,
    avg(wind) as wind,
    max(wind_gust) as wind_gust,
    avg(wind10) as wind10,
    avg(wind10_omm) as wind10_omm,
    avg(windchill) as windchill
 from obs
 group by 1,2
;



-- simple select select 
    poste_id,
    barometer,
    barometer_omm,
    dewpoint,
    etp,
    extra_humid1,
    extra_humid2,
    extra_temp1,
    extra_temp2,
    extra_temp3,
    hail,
    hail_rate,
    heatindex,
    heating_temp,
    in_humidity,
    in_temp,
    leaf_temp1,
    leaf_temp2,
    leaf_wet1,
    leaf_wet2,
    out_humidity,
    out_humidity_omm,
    out_temp,
    out_temp_omm,
    pressure,
    radiation,
    rain,
    rain_omm,
    rain_rate,
    rx,
    soil_moist1,
    soil_moist2,
    soil_moist3,
    soil_moist4,
    soil_temp1,
    soil_temp2,
    soil_temp3,
    soil_temp4,
    uv,
    voltage,
    wind,
    wind_gust,
    wind10,
    wind10_omm,
    windchill
    m obs


// timescaledb dictionary
select min(time), max(time) from obs;
        min         |         max
---------------------+---------------------
 2017-01-01 00:00:00 | 2022-03-11 19:55:00

select count(*) from obs;
  count
---------
4 238 150

-- show global info 
SELECT * FROM timescaledb_information.hypertables;

-- show chunks info
SELECT chunk_name, range_start, range_end FROM timescaledb_information.chunks WHERE hypertable_name in ('obs', 'obs_b') order by 2 desc;
22 chunks

-- show row count for each chunks obs
SELECT ts.chunk_name, count(o.id)
    FROM timescaledb_information.chunks ts join obs o on o.time >= ts.range_start and o.time < ts.range_end
    WHERE hypertable_name = 'obs'
    group by 1
    order by 1
;
     chunk_name      | count
---------------------+--------
 _hyper_1_1254_chunk | 141120
 _hyper_1_1255_chunk | 201600
 ...
 _hyper_1_1274_chunk | 201600
 _hyper_1_1275_chunk |  65030

-- show row count for each chunks extremes
SELECT ts.chunk_name, count(o.id)
    FROM timescaledb_information.chunks ts join obs o on o.time >= ts.range_start and o.time < ts.range_end
    WHERE hypertable_name = 'obs'
    group by 1
    order by 1
;

-- get chunk size
select 
    'obs' as table,
    chunk_name,
    pg_size_pretty(table_bytes) as table_bytes,
    pg_size_pretty(index_bytes) as index_bytes,
    pg_size_pretty(total_bytes) as total_bytes
from chunks_detailed_size('obs');
UNION
select 
    'obs_old' as table,
    chunk_name,
    pg_size_pretty(table_bytes) as table_bytes,
    pg_size_pretty(index_bytes) as index_bytes,
    pg_size_pretty(total_bytes) as total_bytes
from chunks_detailed_size('obs_old');

-- get db size
select 
   'obs' as table,
    pg_size_pretty(table_bytes) as table_bytes,
    pg_size_pretty(index_bytes) as index_bytes,
    pg_size_pretty(total_bytes) as total_bytes
from hypertable_detailed_size('obs')
union
select 
   'extremes' as table,
    pg_size_pretty(table_bytes) as table_bytes,
    pg_size_pretty(index_bytes) as index_bytes,
    pg_size_pretty(total_bytes) as total_bytes
from hypertable_detailed_size('extremes');

-- ????
with size_total as (
        select sum(total_bytes) as total_size_byte,
               sum(after_compression_total_bytes) as compressed_total_bytes
        from chunks_detailed_size('obs') as o
             inner join chunck_compression_stats('obs') c
               on o.chunk_schema = c.chunk_shema

)
select pg_size_pretty(total_size_compressed(total_size-compressed-total-size)) as total_uncompressed,
        pg_size_pretty(compressed_total_bytes) as total_compressed,
        pg_size_pretty(total_size_bytes) as total_size
        from size_totals;

-- get compression info
SELECT * FROM timescaledb_information.compression_settings WHERE hypertable_name in ('obs', 'extremes');

-- ??
SELECT * from timescaledb_information.dimensions ORDER BY hypertable_name, dimension_number;

-- get global information
SELECT * FROM timescaledb_information.hypertables WHERE hypertable_name in ('obs', 'extremes');

-- chunck length
SELECT h.table_name, c.interval_length FROM _timescaledb_catalog.dimension c
JOIN _timescaledb_catalog.hypertable h ON h.id = c.hypertable_id;

-- -------------------------------------------------------------------
-- Tout ce qui est apres marchait sur une ancienne version de la base
-- -------------------------------------------------------------------
Grafana
1 mesure for 1 station, with n last measures
=============================================
select time, case when step = 0 then 'now' else (-interval)::text END AS metric, moyenne from
(select step, (step||${aggreg:singlequote})::interval as interval from generate_series(0, $steps_histo) g(step)) my_steps
 join lateral
(SELECT
    timescaledb_experimental.time_bucket_ng('15m', o.time + interval)::timestamptz AS time, avg(o.$mesure) AS moyenne
    FROM obs o join poste p on p.id = o.poste_id
    WHERE p.meteor = ${station:singlequote} and
          o.time between $__timeFrom()::timestamptz - interval and $__timeTo()::timestamptz - interval
    GROUP BY 1
    ORDER BY 1
) l on true
order by 1


// requetes
cumul glissant pluie 1/3/6 hours sur 3/6 jours



select 'poste_id','dateTime','duration','out_temp','windchill','dewpoint','soiltemp','humidity','barometer','pressure','wind','wind_dir','wind_gust','wind_gust_dir','wind10','wind10_dir','rain','rain_rate','uv_indice','radiation','etp_sum','in_temp','in_humidity','rx','voltage'
union

select 1, dateTime, `interval`, outTemp, windchill, dewpoint, soilTemp1, outHumidity, barometer, pressure, windSpeed, windDir, windGust, windGustDir, 0, 0, rain, rainRate, UV, radiation, ET, inTemp, inHumidity, rxCheckPercent, consBatteryVoltage from archive limit 10

INTO OUTFILE 'testMySql.csv'
FIELDS ENCLOSED BY '"' 
TERMINATED BY ','
ESCAPED BY '"'
LINES TERMINATED BY 'n'


SELECT
  timescaledb_experimental.time_bucket_ng('1 day', time) AS time,
  avg(barometer_omm) as barometer_omm
FROM obs
WHERE
  time BETWEEN '2021-04-25T20:39:37.248Z' AND '2022-04-25T20:39:37.248Z'
  and poste_id = 20
  group by 1
ORDER BY 1;


TRUNCATE obs RESTART IDENTITY; TRUNCATE extremes RESTART IDENTITY; TRUNCATE histo_obs RESTART IDENTITY; TRUNCATE histo_extreme RESTART IDENTITY; TRUNCATE incidents RESTART IDENTITY; update postes set last_extremes_date='2000-01-01T00:00:00',last_obs_date='2000-01-01T00:00:00', last_extremes_id=0,  last_obs_id=0;

select (select count(*) from obs) as nb_obs, (select count(*) from histo_obs) as nb_histo_obs, (select count(*) from extremes) as nb_extreme, (select count(*) from histo_extreme) as nb_histo_x;
